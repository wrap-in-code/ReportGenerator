package com.natwest.reportgenerator.service;

import com.natwest.reportgenerator.model.InputRecord;
import com.natwest.reportgenerator.model.OutputRecord;
import com.natwest.reportgenerator.model.ReferenceRecord;
import com.natwest.reportgenerator.util.FileParser;
import com.natwest.reportgenerator.util.FileParserFactory;
import lombok.extern.slf4j.Slf4j;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;


@Service
@Slf4j
public class ReportService {

    @Autowired
    private FileParserFactory fileParserFactory;

    @Autowired
    private KieContainer kieContainer;


    public void generateReport(String inputFilePath, String referenceFilePath, String outputFilePath) {

        try {
            FileParser inputFileParser = fileParserFactory.getFileParser(inputFilePath);
            FileParser referenceFileParser = fileParserFactory.getFileParser(referenceFilePath);

            log.info("Reading input records!!");
            List<InputRecord> inputRecords = inputFileParser.parseInputFile(inputFilePath);
            log.info("Reading reference records!!");
            Map<String, ReferenceRecord> referenceData = referenceFileParser.parseReferenceFile(referenceFilePath);
            log.info("Processing record as per transformation rule!!");
            List<OutputRecord> outputRecords = processRecords(inputRecords, referenceData);
            log.info("Writing processed record to output file!!");
            inputFileParser.writeOutputFile(outputFilePath, outputRecords);
        } catch (IOException e) {
            log.error("Error generating report", e);
        }
    }

    private List<OutputRecord> processRecords(List<InputRecord> inputRecords, Map<String, ReferenceRecord> referenceData) {
        KieSession kieSession = kieContainer.newKieSession();

        // Insert all reference records into the session
        for (ReferenceRecord refRecord : referenceData.values()) {
            kieSession.insert(refRecord);
        }

        // Insert all input records into the session and fire rules
        for (InputRecord inputRecord : inputRecords) {
            kieSession.insert(inputRecord);
        }

        kieSession.fireAllRules();

        // Collect the output records generated by the rules
        List<OutputRecord> outputRecords = kieSession.getObjects(o -> o instanceof OutputRecord)
                .stream()
                .map(o -> (OutputRecord) o)
                .collect(Collectors.toList());

        kieSession.dispose();
        return outputRecords;
    }
}
